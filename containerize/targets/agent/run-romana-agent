#!/bin/bash

# Copyright (c) 2016 Pani Networks
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

# Enable shell options
shopt -s nullglob

usage() {
	echo "${0##*/}: entrypoint for romana agent container."
	echo "Options:"
	echo " -h or --help: print usage"
	echo " --etcd-endpoints: a comma-separated list of etcd endpoint URLs for the etcd cluster"
	echo " --mtu: MTU to apply to pod veth interfaces"
	echo " --nat: Add NAT rule for traffic coming from pods"
	echo " --nat-interface: Interface that NATs traffic"
	echo " --service-cluster-ip-range: Interface that NATs traffic"
	echo " --policies: Enable Network Policies"
	echo " --debug: Turn on debug logging for romana agent/cni. (default: false. valid values: true, false)"
}

# Parse command-line options
etcd_endpoints=
mtu=
nat=
debug=false
nat_interface=
service_ip_cidr=
policies=
while [[ $1 == -* ]]; do
	# expand --foo=bar options
	if [[ $1 == -*=* ]]; then
		set -- "${1%%=*}" "${1#*=}" "${@:2}"
	fi
	case "$1" in
	-h|--help)
		usage
		exit 0
		;;
	--etcd-endpoints)
		etcd_endpoints="$2"
		shift 2
		;;
	--mtu)
		mtu="$2"
		shift 2
		;;
	--nat)
		nat="$2"
		shift 2
		;;
	--nat-interface)
		nat_interface="$2"
		shift 2
		;;
	--service-cluster-ip-range)
		service_ip_cidr="$2"
		shift 2
		;;
	--policies)
		policies="$2"
		shift 2
		;;
	--debug)
		debug="$2"
		shift 2
		;;
	*)
		echo "Unknown option '$1'"
		usage
		exit 1
		;;
	esac
done

usage_error() {
	if (($# < 1)); then
		internal_error "Call to usage_error without a message"
	fi
	echo "Error:" "$@"
	usage
	exit 1
}
	
internal_error() {
	echo "Internal Error:" "$@"
	exit 2
}

# Kubernetes HTTPS Service must be defined via envinronment variables
if ! [[ "$KUBERNETES_SERVICE_HOST" ]]; then
	usage_error "Unable to find Kubernetes API Server. Environment varible KUBERNETES_SERVICE_HOST not found"
fi
if ! [[ "$KUBERNETES_SERVICE_PORT_HTTPS" ]]; then
	usage_error "Unable to find Kubernetes API Server. Environment varible KUBERNETES_SERVICE_PORT_HTTPS not found"
fi
if ! [[ -f "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt" ]]; then
	usage_error "Unable to find CA certificate for Kubernetes API Server. File /var/run/secrets/kubernetes.io/serviceaccount/ca.crt not found"
fi
if ! [[ -f "/var/run/secrets/kubernetes.io/serviceaccount/token" ]]; then
	usage_error "Unable to find token for Kubernetes API Server. File /var/run/secrets/kubernetes.io/serviceaccount/token not found"
fi

api_server="https://$KUBERNETES_SERVICE_HOST:$KUBERNETES_SERVICE_PORT_HTTPS"

kube_config=/var/run/romana/kubeconfig
kubectl_cert="/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"
kubectl --kubeconfig="$kube_config" config set-cluster kubernetes --embed-certs --certificate-authority="$kubectl_cert" --server="$api_server"
kubectl --kubeconfig="$kube_config" config set-credentials romana-agent --token="$(< /var/run/secrets/kubernetes.io/serviceaccount/token)"
kubectl --kubeconfig="$kube_config" config set-context romana-agent@kubernetes --user=romana-agent --cluster=kubernetes
kubectl --kubeconfig="$kube_config" config use-context romana-agent@kubernetes

# Romana Daemon Service must be defined via envinronment variables
if ! [[ "$ROMANA_SERVICE_HOST" ]]; then
	usage_error "Unable to find Romana Service. Environment varible ROMANA_SERVICE_HOST not found"
fi
if ! [[ "$ROMANA_SERVICE_PORT_DAEMON" ]]; then
	usage_error "Unable to find Romana Service. Environment varible ROMANA_SERVICE_PORT_DAEMON not found"
fi
romana_daemon="http://$ROMANA_SERVICE_HOST:$ROMANA_SERVICE_PORT_DAEMON"

# Romana etcd is required. Use value from command-line, or look for environment variables from Kubernetes
if [[ "$etcd_endpoints" ]]; then
	: # ok
elif [[ "$ROMANA_ETCD_SERVICE_HOST" ]] && [[ "$ROMANA_ETCD_SERVICE_PORT_ETCD" ]]; then
	etcd_endpoints="$ROMANA_ETCD_SERVICE_HOST:$ROMANA_ETCD_SERVICE_PORT_ETCD"
else
	usage_error "Romana etcd endpoints must be provided."
fi

# NODENAME environment variable must be set
if ! [[ "$NODENAME" ]]; then
	usage_error "Ensure NODENAME is specified in your daemonset for romana-agent"
fi

# NODEIP environment variable must be set
if ! [[ "$NODEIP" ]]; then
	usage_error "Ensure NODEIP is specified in your daemonset for romana-agent"
fi

# Validation functions
valid_bool() {
	if (($# != 1)); then
		internal_error "valid_bool(): expected 1 parameter, got $#"
	fi
	case "$1" in
	true|false)
		;;
	*)
		return 1
		;;
	esac
	return 0
}

valid_number() {
	if (($# != 1)); then
		internal_error "valid_number(): expected 1 parameter, got $#"
	fi
	if ! [[ "$1" ]]; then
		return 1
	fi
	if ! printf "%d\n" "$1" &> /dev/null; then
		return 1
	fi
	return 0
}

valid_cidr() {
	if (($# != 1)); then
		internal_error "valid_cidr(): expected 1 parameter, got $#"
	fi
	# Split w.x.y.z/p into pieces.
	local w x y z p r v
	IFS='./' read -r w x y z p r <<< "$1"
	if [[ "$r" ]]; then
		# Additional data in the CIDR. Return error.
		return 1
	fi
	# Check w, x, y, z are valid numbers from 0-255.
	error=0
	for v in "$w" "$x" "$y" "$z"; do
		if ! valid_number "$v"; then
			error=1
			break
		fi
		if ! ((v >= 0 && v < 256)); then
			error=1
			break
		fi
	done

	if ((error)); then
		return 1
	fi
	# Check p is some value between 0 and 32.
	if ! valid_number "$p"; then
		return 1
	fi
	if ! ((p >= 0 && p <= 32)); then
		return 1
	fi
	
	# Passed checks. return OK
	return 0
}

# Check if debug is valid
if [[ "$debug" ]]; then
	if ! valid_bool "$debug"; then
		usage_error "Expected 'true' or 'false' for --debug option. ('$debug')"
	fi
else
	debug=false
fi

# Check MTU option is valid
if [[ "$mtu" ]]; then
	if ! valid_number "$mtu"; then
		usage_error "Expected valid number for --mtu option. ('$mtu')"
	fi
	if ! ((mtu > 0)); then
		usage_error "Expected positive number for --mtu option. ('$mtu')"
	fi
fi

# Check NAT option is valid
if [[ "$nat" ]]; then
	if ! valid_bool "$nat"; then
		usage_error "Expected 'true' or 'false' for --nat option. ('$nat')"
	fi
else
	nat=true
fi

# Check service-cluster-ip-range is valid.
# If not provided, try to guess some known defaults based on kube-apiserver's ClusterIP
if [[ "$service_ip_cidr" ]]; then
	if ! valid_cidr "$service_ip_cidr"; then
		usage_error "Invalid CIDR specified for --service-cluster-ip-range: $service_ip_cidr"
	fi
else
	case "$KUBERNETES_SERVICE_HOST" in
	100.64.0.1) # kops default
		service_ip_cidr=100.64.0.0/13
		;;
	10.96.0.1) # kubeadm default
		service_ip_cidr=10.96.0.0/12
		;;
	*)
		usage_error "Unable to determine ClusterIP CIDR. Please specify --service-cluster-ip-range to match your Kubernetes configuration"
		;;
	esac
fi

# Check policies option is valid
if [[ "$policies" ]]; then
	if ! valid_bool "$policies"; then
		usage_error "Expected 'true' or 'false' for --policies option. ('$policies')"
	fi
else
	policies=true
fi

# Networking functions
ip_for_interface() {
	if (($# != 1)); then
		internal_error "ip_for_interface(): expected 1 parameter, got $#"
		return $?
	fi
	if ! ip link show "$1" &>/dev/null; then
		return 1
	fi
	local found=0 first second
	while read -r first second _; do
		if [[ "$first" = "inet" ]]; then
			found=1
			break
		fi
	done < <(ip addr show "$1")
	if ! ((found)); then
		return 1
	fi
	printf "%s" "${second%/*}"
}

interface_for_ip() {
	if (($# != 1)); then
		internal_error "interface_for_ip(): expected 1 parameter, got $#"
		return $?
	fi
	local found=0 interface
	while read -ra tokens; do
		if [[ "${tokens[2]}" != "inet" ]]; then
			# we really expected the word inet here..
			continue
		fi
		if [[ "${tokens[3]%/*}" != "$1" ]]; then
			# this is not the address we're looking for
			continue
		fi
		found=1
		interface="${tokens[1]}"
	done < <(ip -4 -o address show scope global)
	if ! (( found )); then
		return 1
	fi
	printf "%s" "$interface"
}

interface_mtu() {
	if (($# != 1)); then
		internal_error "interface_mtu(): expected 1 parameter, got $#"
		return $?
	fi
	if ! ip link show "$1" &>/dev/null; then
		return 1
	fi
	local found=0 i tokens mtu
	read -ra tokens < <(ip -o link show "$1")
	tokens=( "${tokens[@]%\\}" ) # remove trailing \ from any values
	for ((i=3; i < ${#tokens[@]}-1; i++)); do
		if [[ "${tokens[i]}" = "mtu" ]]; then
			found=1
			mtu="${tokens[i+1]}"
			break
		fi
	done
	if ! ((found)); then
		return 1
	fi
	printf "%d" "$mtu"
}

if ! interface=$(interface_for_ip "$NODEIP"); then
	internal_error "Unable to find interface with the address $NODEIP"
fi

# Use interface's MTU for pods if not set
if ! [[ "$mtu" ]]; then
	if ! mtu=$(interface_mtu "$interface"); then
		internal_error "Unable to get MTU for interface $interface"
	fi
fi

# Check if the route for the service-cluster-ip-range uses the host interface
if route_info=$(ip -4 -o route get "$service_ip_cidr"); then
	# Look for the word 'dev'
	read -ra tokens <<< "$route_info"
	if (( ${#tokens[@]} )); then
		device_found=0
		for ((i=1; i < ${#tokens[@]} - 1; i++)); do
			if [[ "${tokens[i]}" = dev ]]; then
				device_found=1
				# If it'd route via a different interface, try to add
				# the correct route
				if [[ "${tokens[i+1]}" != "$interface" ]]; then
					if ip route add "$service_ip_cidr" dev "$interface"; then
						echo "Route added for $service_ip_cidr using device $interface"
					else
						echo "Failed to add route for $service_ip_cidr using device $interface"
					fi
				fi
				break
			fi
		done
		if ! (( device_found )); then
			echo "Failed to find device in route information for $service_ip_cidr"
		fi
	fi
else
	echo "Unable to look up route information for '$service_ip_cidr'"
fi

# Install CNI
if [[ -d /host/usr/local/bin ]]; then
	cp /usr/local/bin/romana /host/usr/local/bin/romana
fi
if [[ -d /host/opt/cni/bin ]]; then
	# Delete if it exists, then copy into place.
	# This prevents errors if it's actively being run by kubelet
	if [[ -f /host/opt/cni/bin/romana ]]; then
		rm /host/opt/cni/bin/romana
	fi
	cp /var/lib/romana/cni-installation/romana_cni /host/opt/cni/bin/romana
fi
if [[ -d /host/etc/cni/net.d ]]; then
	existing_files=( /host/etc/cni/net.d/*.conf )
	existing_cni_configs=()
	for f in "${existing_files[@]}"; do
		fn="${f##*/}"
		if [[ "$fn" = "10-romana.conf" ]]; then
			# this is ours
			:
		else
			existing_cni_configs+=( "$fn" )
		fi
	done
	if (( ${#existing_cni_configs[@]} )); then
		printf "Existing CNI configuration found on host:\n"
		for config in "${existing_cni_configs[@]}"; do
			printf "%s\n" "$config"
		done
		internal_error "cni config not installed as other configs exist"
	fi

	# shellcheck disable=SC2016
	etcd_endpoints_json=$(jq -c --arg etcd_endpoints "$etcd_endpoints" '$etcd_endpoints | split(",")' <<< "{}")
	replacements=(
		-e 's|<mtu>|'"$mtu"'|g'
		-e 's|<kubernetes-config>|/var/run/romana/kubeconfig|g'
		-e 's|<romana-hostname>|'"$NODENAME"'|g'
		-e 's|<romana-segment>|romana.io/segment|g'
		-e 's|<policies-enabled>|'"$policies"'|g'
		-e 's|<etcd-endpoints>|'"$etcd_endpoints_json"'|g'
	)
	sed "${replacements[@]}" /var/lib/romana/cni-installation/10-romana.conf > /host/etc/cni/net.d/10-romana.conf
fi
if [[ -d /host/etc/romana ]]; then
	# Generate cli.yaml for romana cli tool
	replacements=(
		-e 's|<romana-daemon-address>|'"$ROMANA_SERVICE_HOST"'|g'
		-e 's|<romana-daemon-port>|'"$ROMANA_SERVICE_PORT_DAEMON"'|g'
	)
	sed "${replacements[@]}" /var/lib/romana/templates/dot-romana.template > /host/etc/romana/cli.yaml
fi

# cni debug log support.
if [[ -d /host/etc/rlog ]]; then
    if [[ "$debug" == "true" ]]; then
    	cp /var/lib/rlog/romana-rlog.conf /host/etc/rlog/romana.conf
    else
    	rm /host/etc/rlog/romana.conf 2> dev/null
    fi
fi

# Check if etcd is running. Run check for cluster-health
printf "Checking if etcd is running..."
intervals=( 0 1 1 1 3 3 3 )
etcd_ready=0
for i in "${intervals[@]}"; do
	sleep "$i"
	if etcd_response=$(etcdctl --endpoints="$etcd_endpoints" cluster-health 2>/dev/null); then
		etcd_ready=1
		break
	fi
done
if ! (( etcd_ready )); then
	printf "error connecting to etcd: %s\n" "$etcd_response"
	exit 1
fi
printf "ok.\n"
printf "%s\n" "$etcd_response"

# Check if romanad is running and has a network configured
printf "Checking if romana daemon is running..."
intervals=( 0 1 1 1 3 3 3 )
daemon_ready=0
for i in "${intervals[@]}"; do
	sleep "$i"
	if daemon_response=$(curl -s "${romana_daemon}/networks"); then
		daemon_ready=1
		break
	fi
done
if ! (( daemon_ready )); then
	printf "error connecting to romana daemon\n"
	exit 1
fi
printf "ok.\n"

printf "Checking if romana networks are configured..."
networks_ready=0
# Handle response if they're already configured
if [[ "$daemon_response" ]]; then
	if num_networks=$(jq 'length' <<< "$daemon_response") && (( num_networks )); then
		networks_ready=1
	fi
fi
if ! (( networks_ready )); then
	# retry a few times. it may still be launching
	intervals=( 2 2 2 2 2 10 10 )
	for i in "${intervals[@]}"; do
		sleep "$i"
		if ! daemon_response=$(curl -s "${romana_daemon}/networks"); then
			continue
		fi
		if num_networks=$(jq 'length' <<< "$daemon_response") && (( num_networks )); then
			networks_ready=1
			break
		fi
	done
fi
if ! (( networks_ready )); then
	printf "failed\n"
	exit 1
elif (( num_networks == 1 )); then
	printf "ok. one network configured.\n"
else
	printf "ok. %d networks configured.\n" "$num_networks"
fi

if [[ "$policies" = "true" ]]; then
	printf "Checking if policies are initialized..."
	intervals=( 0 1 1 2 2 2 5 5 )
	policies_ready=0
	for i in "${intervals[@]}"; do
		sleep "$i"
		if etcdctl --endpoints="$etcd_endpoints" ls /romana/policies &>/dev/null; then
			policies_ready=1
			break
		fi
	done
	if ! (( policies_ready )); then
		printf "failed\n"
		exit 1
	fi
	printf "ok\n"
fi

cidr_min() {
	if (($# != 1)); then
		internal_error "cidr_min(): expected 1 parameter, got $#"
	fi
	if ! valid_cidr "$1"; then
		internal_error "cidr_min(): '$1' is not a valid CIDR."
	fi
	local v w x y z p
	IFS='./' read -r w x y z p <<< "$1"
	((v=(w<<24) + (x<<16) + (y<<8) + z))
	((v=v>>32-p))
	((v=v<<32-p))
	printf "%d" "$v"
}

cidr_max() {
	if (($# != 1)); then
		internal_error "cidr_max(): expected 1 parameter, got $#"
	fi
	if ! valid_cidr "$1"; then
		internal_error "cidr_max(): '$1' is not a valid CIDR."
	fi
	local v w x y z p
	IFS='./' read -r w x y z p <<< "$1"
	((v=(w<<24) + (x<<16) + (y<<8) + z))
	((v=v>>32-p))
	((v=v<<32-p))
	((v+=2**(32-p)-1))
	printf "%d" "$v"
}

cidr_overlaps() {
	if (($# != 2)); then
		internal_error "cidr_overlaps(): expected 2 parameter, got $#"
	fi
	if ! valid_cidr "$1"; then
		internal_error "cidr_overlaps(): '$1' is not a valid CIDR."
	fi
	if ! valid_cidr "$2"; then
		internal_error "cidr_overlaps(): '$2' is not a valid CIDR."
	fi
	local first second
	first="$1" second="$2"
	first_min=$(cidr_min "$first") first_max=$(cidr_max "$first")
	second_min=$(cidr_min "$second") second_max=$(cidr_max "$second")

	if (( first_max < second_min )) || (( second_max < first_min )); then
		return 1
	fi
	return 0
}

# Check if the CIDR for the network is valid
romana_cidrs=()
while IFS=$'\t' read -r network_id network_cidr; do
	if ! [[ "$network_cidr" ]]; then
		internal_error "network '$network_id' is missing cidr value"
	fi
	if ! valid_cidr "$network_cidr"; then
		internal_error "invalid cidr value for network '$network_id': $network_cidr"
	fi
	if cidr_overlaps "$network_cidr" "$service_ip_cidr"; then
		internal_error "cidr for network '$network_id' overlaps with kubernetes service ip range: $network_cidr overlaps $service_ip_cidr"
	fi
	romana_cidrs+=( "$network_cidr" )
done < <(jq -r '.[] | "\(.id)\t\(.cidr)"' <<< "$daemon_response")

# Add a chain for forwarding rules.
# This permits packets on the forward chain that aren't from Romana pod ranges.

# Create forward chain
if ! iptables -t filter -L ROMANA_FORWARD 2>/dev/null; then
	if ! iptables -t filter -N ROMANA_FORWARD; then
		internal_error "Error creating ROMANA_FORWARD chain for FORWARD rules"
	fi
fi
# Flush rules from chain
if ! iptables -t filter -F ROMANA_FORWARD; then
	internal_error "Error flushing ROMANA_FORWARD chain for FORWARD rules"
fi
# Add exclusions for romana cidrs
for romana_cidr in "${romana_cidrs[@]}"; do
	if ! iptables -t filter -A ROMANA_FORWARD -s "$romana_cidr" -j RETURN; then
		internal_error "Error adding exclusion rule to ROMANA_FORWARD for $romana_cidr"
	fi
done
# Add final accept rule
if ! iptables -t filter -A ROMANA_FORWARD -j ACCEPT; then
	internal_error "Error adding ACCEPT rule to ROMANA_FORWARD"
fi
# Activate romana forwarding rules
if ! iptables -t filter -C FORWARD -m comment --comment "romana forwarding rules" -o "$interface" -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT; then
	if ! iptables -t filter -A FORWARD -m comment --comment "romana forwarding rules" -o "$interface" -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT; then
		internal_error "Error adding established/related rule to FORWARD chain"
	fi
fi
if ! iptables -t filter -C FORWARD -m comment --comment "romana forwarding rules" -i "$interface" -o "$interface" -j ROMANA_FORWARD; then
	if ! iptables -t filter -A FORWARD -m comment --comment "romana forwarding rules" -i "$interface" -o "$interface" -j ROMANA_FORWARD; then
		internal_error "Error adding ROMANA_FORWARD rules to FORWARD chain"
	fi
fi

if [[ "$nat_interface" ]]; then
	nat_ip=$(ip_for_interface "$nat_interface")
	if ! [[ "$nat_ip" ]]; then
		internal_error "No address found for NAT interface $nat_interface"
	fi
else
	# Use interface as default for nat_interface
	nat_interface="$interface"
	nat_ip="$NODEIP"
fi

case "$nat" in
true)
	# Create chain
	if ! iptables -t nat -L ROMANA-MASQ &>/dev/null; then
		if ! iptables -t nat -N ROMANA-MASQ; then
			internal_error "Error creating ROMANA-MASQ chain for NAT rules"
		fi
	fi
	# Flush rules from chain
	if ! iptables -t nat -F ROMANA-MASQ; then
		internal_error "Error flushing ROMANA-MASQ chain for NAT rules"
	fi
	# Add items to chain
	for romana_cidr in "${romana_cidrs[@]}"; do
		if ! iptables -t nat -A ROMANA-MASQ -d "$romana_cidr" -j RETURN; then
			internal_error "Error adding exclusion to ROMANA-MASQ for $romana_cidr"
		fi
	done
	if ! iptables -t nat -A ROMANA-MASQ -o "$nat_interface" -j MASQUERADE; then
		internal_error "Error adding NAT to ROMANA-MASQ for $nat_interface"
	fi
	# Activate chain
	for romana_cidr in "${romana_cidrs[@]}"; do
		if ! iptables -t nat -C POSTROUTING -m comment --comment "romana postrouting rules" -s "$romana_cidr" -j ROMANA-MASQ; then
			if ! iptables -t nat -A POSTROUTING -m comment --comment "romana postrouting rules" -s "$romana_cidr" -j ROMANA-MASQ; then
				internal_error "Error adding $romana_cidr POSTROUTING rule"
			fi
		fi
	done
	;;
false)
	# If chain exists, deactivate, flush and remove it
	if iptables -t nat -L ROMANA-MASQ &>/dev/null; then
		while IFS= read -r rule; do
			((rulenum++))
			if [[ "$rule" != "${rule/'-m comment --comment "romana postrouting rules"'/}" ]]; then
				if ! iptables -t nat -D "$rulenum"; then
					internal_error "Error removing POSTROUTING rule: $rule"
				fi
				((rulenum--))
			fi
		done < <(iptables -t nat -S POSTROUTING)
		if ! iptables -t nat -F ROMANA-MASQ; then
			internal_error "Error flushing chain for NAT rule"
		fi
		if ! iptables -t nat -X ROMANA-MASQ; then
			internal_error "Error removing chain for NAT rule"
		fi
	fi
	;;
*)
	internal_error "nat variable was not true or false: '$nat'"
	;;
esac
agent_args=(
	-hostname "$NODENAME"
	-endpoints "$etcd_endpoints"
	-link-name "$interface"
	-provision-iface -provision-sysctls
)
if [[ "$policies" = "true" ]]; then
	agent_args+=( -policy )
fi

printf "Launching Romana Agent\n"
if [[ "$debug" == "true" ]]; then
    export RLOG_LOG_LEVEL="DEBUG"
    # export RLOG_TRACE_LEVEL="9"
    # export RLOG_CALLER_INFO="y"
fi
exec /usr/local/bin/romana_agent "${agent_args[@]}"
